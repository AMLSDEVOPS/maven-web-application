pipeline {
    agent any
    
    parameters {
        choice(name: 'VERSION_CHOICE', choices: ['1.1.0', '1.2.0', '1.3.0'], description: 'Choose a version')
        choice(name: 'BranchName', choices: ['master', 'dev'], description: 'Choose a branch')
        // booleanParam(name: 'executeTests', defaultValue: true, description: 'Execute tests?')
    }
    
    tools {
        maven 'maven3'
    }
    
    environment {
        NEW_VERSION = '1.3.0'
        // SERVER_CREDENTIALS = credentials('server-credentials-id') // Replace with actual credentials ID
    }

    stages {
        stage('Cloning Repo') {
            steps {
                git credentialsId: 'mvenkatgit', url: 'https://github.com/MithunTechnologiesDevOps/maven-web-application.git'
            }
        }

        stage('Running the Unit Tests') {
            steps {
                echo "Building branch ${params.BranchName} for PR ${env.CHANGE_ID ?: 'N/A'}"
            }
        }

        stage('Testing the Application') {
            steps {
                echo "Running tests for Build Number: ${env.BUILD_NUMBER}"
                echo "Building the Version of ${env.NEW_VERSION}"
                echo "Selected Version: ${params.VERSION_CHOICE}"
            }
        }
        
        stage('Application') {
            steps {
                echo "Running tests for Build Number: ${env.BUILD_NUMBER}"
                echo "Building the Version of ${env.NEW_VERSION}"
                echo "Selected Version: ${params.VERSION_CHOICE}"
            }
        }

        stage('Branch') {
            steps {
                script {
                   echo "Branch name is: ${params.BranchName}"
                }
            }
        }

        stage('Deploying the Application') {
            when {
                expression {
                    return params.BranchName == 'dev' || params.BranchName == 'master'
                }
            }
            steps {
                echo "Deploying to branch ${params.BranchName}"
                // Uncomment and update this block if you need credentials and a deployment script
                
                withCredentials([usernamePassword(credentialsId: 'system-user', usernameVariable: 'USER', passwordVariable: 'PWD')]) {
                    sh "some script here ${USER} ${PWD}"
                }
            }
        }
        
        stage('Init') {
            steps {
                script {
                    gv = load "script.groovy"
                }
            }
        }
        
        stage('Build') {
            steps {
                script {
                    gv.buildApp()
                }
            }
        }
        
        stage('Test') {
            steps {
                script {
                    gv.testApp()
                }
            }
        }
        
        stage('Deploying') {
            steps {
                script {
                    gv.deployApp() // Assuming method names are in camelCase
                }
            }
        }

        stage('Workspace Cleanup') {
            steps {
                cleanWs()
            }
        }
    }

    post {
        always {
            echo 'Pipeline completed'
        }

        success {
            echo 'Pipeline succeeded'
        }

        failure {
            echo 'Pipeline failed'
        }
    }
}
